[{"path":[]},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://stacks.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://stacks.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 stacks authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stacks.tidymodels.org/dev/articles/basics.html","id":"define-candidate-ensemble-members","dir":"Articles","previous_headings":"","what":"Define candidate ensemble members","title":"Getting Started With stacks","text":"highest level, ensembles formed model definitions. package, model definitions instance minimal workflow, containing model specification (defined parsnip package) , optionally, preprocessor (defined recipes package). Model definitions specify form candidate ensemble members.  Defining constituent model definitions undoubtedly longest part building ensemble stacks. ’re familiar tidymodels “proper,” ’re probably fine skip section, keeping things mind: ’ll need save assessment set predictions workflow utilized tune_grid(), tune_bayes(), fit_resamples() objects setting control arguments save_pred = TRUE save_workflow = TRUE. Note use control_stack_*() convenience functions ! model definition must share rsample rset object. ’ll first start splitting training data, generating resamples, setting options used model definition. Tuning fitting results use ensembles need fitted control arguments save_pred = TRUE save_workflow = TRUE—settings ensure assessment set predictions, well workflow used fit resamples, stored resulting object. convenience, stacks supplies control_stack_*() functions generate appropriate objects . example, ’ll working tune_grid() fit_resamples() tune package, use following control settings: ’ll define three different model definitions try predict time hatch—K-nearest neighbors model (hyperparameters tune), linear model, support vector machine model (, hyperparameters tune). Starting K-nearest neighbors, begin creating parsnip model specification: Note , since tuning several possible numbers neighbors, model specification defines multiple model configurations. specific form configurations determined specifying grid search tune_grid(). , extend basic recipe defined earlier fully specify form design matrix use K-nearest neighbors model: Starting basic recipe, convert categorical variables dummy variables, remove column one observation, impute missing values numeric variables using mean, normalize numeric predictors. Pre-processing instructions remaining models defined similarly. Now, combine model specification pre-processing instructions defined form workflow object: Finally, can make use workflow, training set resamples, metric set, control object tune hyperparameters. Using grid argument, specify like optimize four possible values k using grid search. knn_res object fully specifies candidate members, ready included stacks workflow. Now, specifying linear model, note optimizing hyperparameters. Thus, use fit_resamples() function rather tune_grid() tune_bayes() fitting resamples. Finally, putting together model definition support vector machine: Altogether, ’ve created three model definitions, K-nearest neighbors model definition specifies 4 model configurations, linear regression specifies 1, support vector machine specifies 6.  three model definitions fully specified, ready begin stacking model configurations. (Note , applied settings, one likely specify many 11 candidate members.)","code":"# some setup: resampling and a basic recipe set.seed(1) tree_frogs_split <- initial_split(tree_frogs) tree_frogs_train <- training(tree_frogs_split) tree_frogs_test  <- testing(tree_frogs_split)  set.seed(1) folds <- rsample::vfold_cv(tree_frogs_train, v = 5)  tree_frogs_rec <-    recipe(latency ~ ., data = tree_frogs_train)  metric <- metric_set(rmse) ctrl_grid <- control_stack_grid() ctrl_res <- control_stack_resamples() # create a model definition knn_spec <-   nearest_neighbor(     mode = \"regression\",      neighbors = tune(\"k\")   ) %>%   set_engine(\"kknn\")  knn_spec #> K-Nearest Neighbor Model Specification (regression) #>  #> Main Arguments: #>   neighbors = tune(\"k\") #>  #> Computational engine: kknn # extend the recipe knn_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors()) %>%   step_impute_mean(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors())  knn_rec #>  #> ── Recipe ──────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:   1 #> predictor: 4 #>  #> ── Operations #> • Dummy variables from: all_nominal_predictors() #> • Zero variance filter on: all_predictors() #> • Mean imputation for: all_numeric_predictors() #> • Centering and scaling for: all_numeric_predictors() # add both to a workflow knn_wflow <-    workflow() %>%    add_model(knn_spec) %>%   add_recipe(knn_rec)  knn_wflow #> ══ Workflow ══════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: nearest_neighbor() #>  #> ── Preprocessor ────────────────────────────────────────────────────────── #> 4 Recipe Steps #>  #> • step_dummy() #> • step_zv() #> • step_impute_mean() #> • step_normalize() #>  #> ── Model ───────────────────────────────────────────────────────────────── #> K-Nearest Neighbor Model Specification (regression) #>  #> Main Arguments: #>   neighbors = tune(\"k\") #>  #> Computational engine: kknn # tune k and fit to the 5-fold cv set.seed(2020) knn_res <-    tune_grid(     knn_wflow,     resamples = folds,     metrics = metric,     grid = 4,     control = ctrl_grid   )  knn_res #> # Tuning results #> # 5-fold cross-validation  #> # A tibble: 5 × 5 #>   splits           id    .metrics         .notes           .predictions #>   <list>           <chr> <list>           <list>           <list>       #> 1 <split [343/86]> Fold1 <tibble [4 × 5]> <tibble [0 × 3]> <tibble>     #> 2 <split [343/86]> Fold2 <tibble [4 × 5]> <tibble [0 × 3]> <tibble>     #> 3 <split [343/86]> Fold3 <tibble [4 × 5]> <tibble [0 × 3]> <tibble>     #> 4 <split [343/86]> Fold4 <tibble [4 × 5]> <tibble [0 × 3]> <tibble>     #> 5 <split [344/85]> Fold5 <tibble [4 × 5]> <tibble [0 × 3]> <tibble> # create a model definition lin_reg_spec <-   linear_reg() %>%   set_engine(\"lm\")  # extend the recipe lin_reg_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors())  # add both to a workflow lin_reg_wflow <-    workflow() %>%   add_model(lin_reg_spec) %>%   add_recipe(lin_reg_rec)  # fit to the 5-fold cv set.seed(2020) lin_reg_res <-    fit_resamples(     lin_reg_wflow,     resamples = folds,     metrics = metric,     control = ctrl_res   )  lin_reg_res #> # Resampling results #> # 5-fold cross-validation  #> # A tibble: 5 × 5 #>   splits           id    .metrics         .notes           .predictions #>   <list>           <chr> <list>           <list>           <list>       #> 1 <split [343/86]> Fold1 <tibble [1 × 4]> <tibble [0 × 3]> <tibble>     #> 2 <split [343/86]> Fold2 <tibble [1 × 4]> <tibble [0 × 3]> <tibble>     #> 3 <split [343/86]> Fold3 <tibble [1 × 4]> <tibble [0 × 3]> <tibble>     #> 4 <split [343/86]> Fold4 <tibble [1 × 4]> <tibble [0 × 3]> <tibble>     #> 5 <split [344/85]> Fold5 <tibble [1 × 4]> <tibble [0 × 3]> <tibble> # create a model definition svm_spec <-    svm_rbf(     cost = tune(\"cost\"),      rbf_sigma = tune(\"sigma\")   ) %>%   set_engine(\"kernlab\") %>%   set_mode(\"regression\")  # extend the recipe svm_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors()) %>%   step_impute_mean(all_numeric_predictors()) %>%   step_corr(all_predictors()) %>%   step_normalize(all_numeric_predictors())  # add both to a workflow svm_wflow <-    workflow() %>%    add_model(svm_spec) %>%   add_recipe(svm_rec)  # tune cost and sigma and fit to the 5-fold cv set.seed(2020) svm_res <-    tune_grid(     svm_wflow,      resamples = folds,      grid = 6,     metrics = metric,     control = ctrl_grid   )  svm_res #> # Tuning results #> # 5-fold cross-validation  #> # A tibble: 5 × 5 #>   splits           id    .metrics         .notes           .predictions #>   <list>           <chr> <list>           <list>           <list>       #> 1 <split [343/86]> Fold1 <tibble [6 × 6]> <tibble [0 × 3]> <tibble>     #> 2 <split [343/86]> Fold2 <tibble [6 × 6]> <tibble [0 × 3]> <tibble>     #> 3 <split [343/86]> Fold3 <tibble [6 × 6]> <tibble [0 × 3]> <tibble>     #> 4 <split [343/86]> Fold4 <tibble [6 × 6]> <tibble [0 × 3]> <tibble>     #> 5 <split [344/85]> Fold5 <tibble [6 × 6]> <tibble [0 × 3]> <tibble>"},{"path":"https://stacks.tidymodels.org/dev/articles/basics.html","id":"putting-together-a-stack","dir":"Articles","previous_headings":"","what":"Putting together a stack","title":"Getting Started With stacks","text":"first step building ensemble stacks create data_stack object—package, data stacks tibbles (extra attributes) contain assessment set predictions candidate ensemble member.  can initialize data stack using stacks() function. stacks() function works sort like ggplot() constructor ggplot2—function creates basic structure object built top —except ’ll pipe outputs rather adding +. add_candidates() function adds ensemble members stack. mentioned , hood, data_stack object really just tibble extra attributes. Checking actual data: first column gives first response value, remaining columns give assessment set predictions ensemble member. Since ’re regression case, ’s one column per ensemble member. classification settings, many columns levels outcome variable per candidate ensemble member. ’s ! ’re now ready evaluate need combine predictions candidate ensemble member.","code":"stacks() #> # A data stack with 0 model definitions and 0 candidate members. tree_frogs_data_st <-    stacks() %>%   add_candidates(knn_res) %>%   add_candidates(lin_reg_res) %>%   add_candidates(svm_res)  tree_frogs_data_st #> # A data stack with 3 model definitions and 11 candidate members: #> #   knn_res: 4 model configurations #> #   lin_reg_res: 1 model configuration #> #   svm_res: 6 model configurations #> # Outcome: latency (numeric) as_tibble(tree_frogs_data_st) #> # A tibble: 429 × 12 #>    latency knn_res_1_1 knn_res_1_2 knn_res_1_3 knn_res_1_4 lin_reg_res_1_1 #>      <dbl>       <dbl>       <dbl>       <dbl>       <dbl>           <dbl> #>  1     142        76.5        67.8        83.2        83.0           114.  #>  2      79        74.3        71.0        64.2        63.9            78.6 #>  3      50        75.0        71.4        64.9        64.3            81.5 #>  4      68        47.9        49.7        54.0        54.0            78.6 #>  5      64        60.9        53.1        48.4        48.3            36.5 #>  6      52       207.        168.        129.        124.            124.  #>  7      39        22.6        24.9        31.0        31.5            35.2 #>  8      46        23.2        26.6        33.4        33.9            37.1 #>  9     137        75.9        78.8        90.4        90.6            78.8 #> 10      73        67.7        73.6        67.9        67.4            38.8 #> # ℹ 419 more rows #> # ℹ 6 more variables: svm_res_1_1 <dbl>, svm_res_1_4 <dbl>, #> #   svm_res_1_3 <dbl>, svm_res_1_5 <dbl>, svm_res_1_2 <dbl>, #> #   svm_res_1_6 <dbl>"},{"path":"https://stacks.tidymodels.org/dev/articles/basics.html","id":"fit-the-stack","dir":"Articles","previous_headings":"","what":"Fit the stack","title":"Getting Started With stacks","text":"outputs candidate ensemble members highly correlated, blend_predictions() function performs regularization figure can combine outputs stack members come final prediction. blend_predictions function determines member model output ultimately combined final prediction fitting LASSO model data stack, predicting true assessment set outcome using predictions candidate members. Candidates nonzero stacking coefficients become members.  make sure right trade-minimizing number members optimizing performance, can use autoplot() method:  show relationship directly:  results good enough, blend_predictions() called different values penalty. , blend_predictions() picks penalty parameter numerically optimal results. see top results:  Now know combine model output, can fit candidates non-zero stacking coefficients full training set.  Model stacks can thought group fitted member models set instructions combine predictions.  identify model configurations assigned stacking coefficients, can make use collect_parameters() function: object now ready predict new data! Juxtaposing predictions true data:  Looks like predictions pretty strong! stacks predictions perform, though, compared members’ predictions? can use type = \"members\" argument generate predictions ensemble members. Now, evaluating root mean squared error model: can see, stacked ensemble outperforms member models, though closely followed one members. Voila! ’ve now made use stacks package predict red-eyed tree frog embryo hatching using stacked ensemble! full visual outline steps can found .","code":"tree_frogs_model_st <-   tree_frogs_data_st %>%   blend_predictions() autoplot(tree_frogs_model_st) autoplot(tree_frogs_model_st, type = \"members\") autoplot(tree_frogs_model_st, type = \"weights\") tree_frogs_model_st <-   tree_frogs_model_st %>%   fit_members() collect_parameters(tree_frogs_model_st, \"svm_res\") #> # A tibble: 6 × 4 #>   member         cost    sigma  coef #>   <chr>         <dbl>    <dbl> <dbl> #> 1 svm_res_1_1 0.00143 6.64e- 9 0     #> 2 svm_res_1_2 3.59    3.95e- 4 0.931 #> 3 svm_res_1_3 0.0978  1.81e- 2 0     #> 4 svm_res_1_4 0.00849 2.16e-10 0     #> 5 svm_res_1_5 0.256   4.54e- 1 0.159 #> 6 svm_res_1_6 7.64    3.16e- 7 0 tree_frogs_test <-    tree_frogs_test %>%   bind_cols(predict(tree_frogs_model_st, .)) ggplot(tree_frogs_test) +   aes(     x = latency,     y = .pred   ) +   geom_point() +   coord_obs_pred() member_preds <-    tree_frogs_test %>%   select(latency) %>%   bind_cols(predict(tree_frogs_model_st, tree_frogs_test, members = TRUE)) map(member_preds, rmse_vec, truth = member_preds$latency) %>%   as_tibble() #> # A tibble: 1 × 6 #>   latency .pred knn_res_1_4 lin_reg_res_1_1 svm_res_1_5 svm_res_1_2 #>     <dbl> <dbl>       <dbl>           <dbl>       <dbl>       <dbl> #> 1       0  54.3        56.1            55.5        56.9        60.6"},{"path":"https://stacks.tidymodels.org/dev/articles/classification.html","id":"defining-candidate-ensemble-members","dir":"Articles","previous_headings":"","what":"Defining candidate ensemble members","title":"Classification Models With stacks","text":"numeric prediction setting, defining candidate ensemble members undoubtedly longest part ensembling process stacks. First, splitting training data, generating resamples, setting options used model definition. also need use control settings numeric response setting: ’ll define two different model definitions try predict reflex—random forest neural network. Starting random forest: Now, moving neural network model definition: model definitions fully specified, ’re ready start putting together ensemble!","code":"# some setup: resampling and a basic recipe set.seed(1)  tree_frogs_split <- initial_split(tree_frogs) tree_frogs_train <- training(tree_frogs_split) tree_frogs_test  <- testing(tree_frogs_split)  folds <- rsample::vfold_cv(tree_frogs_train, v = 5)  tree_frogs_rec <-    recipe(reflex ~ ., data = tree_frogs_train) %>%   step_dummy(all_nominal_predictors(), -reflex) %>%   step_zv(all_predictors())  tree_frogs_wflow <-    workflow() %>%    add_recipe(tree_frogs_rec) ctrl_grid <- control_stack_grid() rand_forest_spec <-    rand_forest(     mtry = tune(),     min_n = tune(),     trees = 500   ) %>%   set_mode(\"classification\") %>%   set_engine(\"ranger\")  rand_forest_wflow <-   tree_frogs_wflow %>%   add_model(rand_forest_spec)  rand_forest_res <-    tune_grid(     object = rand_forest_wflow,      resamples = folds,      grid = 10,     control = ctrl_grid   ) nnet_spec <-   mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %>%   set_mode(\"classification\") %>%   set_engine(\"nnet\")  nnet_rec <-    tree_frogs_rec %>%    step_normalize(all_predictors())  nnet_wflow <-    tree_frogs_wflow %>%   add_model(nnet_spec) %>%   update_recipe(nnet_rec)  nnet_res <-   tune_grid(     object = nnet_wflow,      resamples = folds,      grid = 10,     control = ctrl_grid   )"},{"path":"https://stacks.tidymodels.org/dev/articles/classification.html","id":"putting-together-a-stack","dir":"Articles","previous_headings":"","what":"Putting together a stack","title":"Classification Models With stacks","text":"Building stacked ensemble, now, takes lines: make sure right trade-minimizing number members optimizing performance, can use autoplot() method:  show relationship directly:  results good enough, blend_predictions() called different values penalty. , blend_predictions() picks penalty parameter numerically optimal results. see top results:  multiple facets since ensemble members can different effects different classes. identify model configurations assigned stacking coefficients, can make use collect_parameters() function: object now ready predict new data! Computing ROC AUC model: Looks like predictions pretty strong! stacks predictions perform, though, compared members’ predictions? can use members argument generate predictions ensemble members. Voilà! ’ve now made use stacks package predict tree frog embryo ear function using stacked ensemble!","code":"tree_frogs_model_st <-    # initialize the stack   stacks() %>%   # add candidate members   add_candidates(rand_forest_res) %>%   add_candidates(nnet_res) %>%   # determine how to combine their predictions   blend_predictions() %>%   # fit the candidates with nonzero stacking coefficients   fit_members()  tree_frogs_model_st #> # A tibble: 10 × 4 #>    member                         type        weight class #>    <chr>                          <chr>        <dbl> <fct> #>  1 .pred_full_nnet_res_1_04       mlp          21.6  full  #>  2 .pred_mid_nnet_res_1_04        mlp          18.2  mid   #>  3 .pred_mid_rand_forest_res_1_05 rand_forest  13.6  low   #>  4 .pred_mid_rand_forest_res_1_08 rand_forest   6.47 mid   #>  5 .pred_mid_nnet_res_1_01        mlp           4.60 low   #>  6 .pred_mid_nnet_res_1_03        mlp           4.58 low   #>  7 .pred_mid_rand_forest_res_1_07 rand_forest   4.07 low   #>  8 .pred_mid_nnet_res_1_10        mlp           3.49 mid   #>  9 .pred_full_nnet_res_1_01       mlp           3.09 full  #> 10 .pred_mid_nnet_res_1_09        mlp           1.43 mid autoplot(tree_frogs_model_st) autoplot(tree_frogs_model_st, type = \"members\") autoplot(tree_frogs_model_st, type = \"weights\") collect_parameters(tree_frogs_model_st, \"rand_forest_res\") #> # A tibble: 60 × 6 #>    member                mtry min_n class terms                       coef #>    <chr>                <int> <int> <chr> <chr>                      <dbl> #>  1 rand_forest_res_1_01     1    26 low   .pred_mid_rand_forest_res…     0 #>  2 rand_forest_res_1_01     1    26 low   .pred_full_rand_forest_re…     0 #>  3 rand_forest_res_1_01     1    26 mid   .pred_mid_rand_forest_res…     0 #>  4 rand_forest_res_1_01     1    26 mid   .pred_full_rand_forest_re…     0 #>  5 rand_forest_res_1_01     1    26 full  .pred_mid_rand_forest_res…     0 #>  6 rand_forest_res_1_01     1    26 full  .pred_full_rand_forest_re…     0 #>  7 rand_forest_res_1_02     2    33 low   .pred_mid_rand_forest_res…     0 #>  8 rand_forest_res_1_02     2    33 low   .pred_full_rand_forest_re…     0 #>  9 rand_forest_res_1_02     2    33 mid   .pred_mid_rand_forest_res…     0 #> 10 rand_forest_res_1_02     2    33 mid   .pred_full_rand_forest_re…     0 #> # ℹ 50 more rows tree_frogs_pred <-   tree_frogs_test %>%   bind_cols(predict(tree_frogs_model_st, ., type = \"prob\")) yardstick::roc_auc(   tree_frogs_pred,   truth = reflex,   contains(\".pred_\")   ) tree_frogs_pred <-   tree_frogs_test %>%   select(reflex) %>%   bind_cols(     predict(       tree_frogs_model_st,       tree_frogs_test,       type = \"class\",       members = TRUE       )     )  tree_frogs_pred #> # A tibble: 303 × 15 #>    reflex .pred_class .pred_class_rand_forest_res…¹ .pred_class_rand_for…² #>    <fct>  <fct>       <fct>                         <fct>                  #>  1 full   full        full                          full                   #>  2 mid    mid         low                           mid                    #>  3 mid    mid         mid                           mid                    #>  4 mid    mid         low                           low                    #>  5 full   full        full                          full                   #>  6 full   full        full                          full                   #>  7 full   full        full                          full                   #>  8 full   full        full                          full                   #>  9 full   full        full                          full                   #> 10 full   full        full                          full                   #> # ℹ 293 more rows #> # ℹ abbreviated names: ¹​.pred_class_rand_forest_res_1_05, #> #   ²​.pred_class_rand_forest_res_1_07 #> # ℹ 11 more variables: .pred_class_nnet_res_1_07 <fct>, #> #   .pred_class_nnet_res_1_02 <fct>, .pred_class_nnet_res_1_03 <fct>, #> #   .pred_class_nnet_res_1_01 <fct>, #> #   .pred_class_rand_forest_res_1_09 <fct>, …  map(   colnames(tree_frogs_pred),   ~mean(tree_frogs_pred$reflex == pull(tree_frogs_pred, .x)) ) %>%   set_names(colnames(tree_frogs_pred)) %>%   as_tibble() %>%   pivot_longer(c(everything(), -reflex)) #> # A tibble: 14 × 3 #>    reflex name                             value #>     <dbl> <chr>                            <dbl> #>  1      1 .pred_class                      0.884 #>  2      1 .pred_class_rand_forest_res_1_05 0.855 #>  3      1 .pred_class_rand_forest_res_1_07 0.865 #>  4      1 .pred_class_nnet_res_1_07        0.868 #>  5      1 .pred_class_nnet_res_1_02        0.848 #>  6      1 .pred_class_nnet_res_1_03        0.845 #>  7      1 .pred_class_nnet_res_1_01        0.842 #>  8      1 .pred_class_rand_forest_res_1_09 0.881 #>  9      1 .pred_class_rand_forest_res_1_08 0.881 #> 10      1 .pred_class_nnet_res_1_05        0.789 #> 11      1 .pred_class_nnet_res_1_09        0.835 #> 12      1 .pred_class_nnet_res_1_06        0.858 #> 13      1 .pred_class_nnet_res_1_04        0.855 #> 14      1 .pred_class_nnet_res_1_10        0.851"},{"path":"https://stacks.tidymodels.org/dev/articles/workflowsets.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Stacking With Workflow Sets","text":"example parallel “Getting Started” vignette, except use workflowsets bundle model workflows define candidate members one workflow set. train using workflowsets::workflow_map() add results model stack using add_candidates(). ’re familiar stacks package, refer vignette big picture! First, loading needed packages: example, ’ll make use tree_frogs data exported stacks, giving experimental results hatching behavior red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages “predator stimulus” jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! ’ll start predicting latency (.e., time hatch) based attributes. ’ll need filter NAs (.e., cases embryo hatch) first. Taking quick look data, seems like hatch time pretty closely related predictors!  Let’s give go!","code":"library(tidymodels) library(stacks) data(\"tree_frogs\")  # subset the data tree_frogs <- tree_frogs %>%   filter(!is.na(latency)) %>%   select(-c(clutch, hatched)) theme_set(theme_bw())  ggplot(tree_frogs) +   aes(x = age, y = latency, color = treatment) +   geom_point() +   labs(x = \"Embryo Age (s)\", y = \"Time to Hatch (s)\", col = \"Treatment\")"},{"path":"https://stacks.tidymodels.org/dev/articles/workflowsets.html","id":"defining-candidate-ensemble-members","dir":"Articles","previous_headings":"","what":"Defining candidate ensemble members","title":"Stacking With Workflow Sets","text":"workflow-based setting, defining candidate ensemble members undoubtedly longest part ensembling process stacks. Instead evaluating model specifications via resampling workflow, though, combine model specifications workflow_set(), evaluate batch workflow_map() function. First, splitting training data, generating resamples, setting options used model definition: also need use control settings workflow-based setting: ’ll define three different model definitions try predict time hatch—K-nearest neighbors model (hyperparameters tune), linear model, support vector machine model (, hyperparameters tune). Starting K-nearest neighbors, begin creating parsnip model specification: Note , since tuning several possible numbers neighbors, model specification defines multiple model configurations. specific form configurations determined specifying grid search. , extend basic recipe defined earlier fully specify form design matrix use K-nearest neighbors model: Starting basic recipe, convert categorical predictors dummy variables, remove predictors one observation, impute missing values numeric predictors using mean, normalize numeric predictors. Pre-processing instructions remaining models defined similarly. Now, specifying linear model, note optimizing hyperparameters. Finally, putting together model specification recipe support vector machine: model specification accompanying recipe now defined, can combine via workflow_set(): Note combination preprocessor model specification assigned wflow_id can use interface individual model definitions: elements workflow set nearly ready evaluated tune_grid(). , though, need ensure fit appropriate control options, just evaluating individual workflows resamples passing stacks. can iteratively add appropriate control settings control_stack_grid() shorthand using option_add() function: can now use workflow_map() function map model definition, evaluating hyperparameters supplied resamples. results section now contains three sets tuning results. Note results corresponding linear regression subclass resample_results rather tune_results—expected, hyperparameters tune model specification. workflow_map() knows fall back fit_resamples() rather tune_grid(), case! can extract tuning results extract_workflow_set_result() helper explore tuning results: three model definitions fully specified tuned workflow set, ready begin stacking model configurations. (Note , applied settings, one likely specify many handful candidate members three model definitions.)","code":"# some setup: resampling and a basic recipe set.seed(1) tree_frogs_split <- initial_split(tree_frogs) tree_frogs_train <- training(tree_frogs_split) tree_frogs_test  <- testing(tree_frogs_split)  set.seed(1) folds <- rsample::vfold_cv(tree_frogs_train, v = 5)  tree_frogs_rec <-    recipe(latency ~ ., data = tree_frogs_train)  metric <- metric_set(rmse) ctrl_grid <- control_stack_grid() # create a model specification knn_spec <-   nearest_neighbor(     mode = \"regression\",      neighbors = tune(\"k\")   ) %>%   set_engine(\"kknn\")  knn_spec #> K-Nearest Neighbor Model Specification (regression) #>  #> Main Arguments: #>   neighbors = tune(\"k\") #>  #> Computational engine: kknn # extend the recipe knn_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors()) %>%   step_impute_mean(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors())  knn_rec #>  #> ── Recipe ──────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:   1 #> predictor: 4 #>  #> ── Operations #> • Dummy variables from: all_nominal_predictors() #> • Zero variance filter on: all_predictors() #> • Mean imputation for: all_numeric_predictors() #> • Centering and scaling for: all_numeric_predictors() # create a model specification lin_reg_spec <-   linear_reg() %>%   set_engine(\"lm\")  # extend the recipe lin_reg_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors()) # create a model specification svm_spec <-    svm_rbf(     cost = tune(\"cost\"),      rbf_sigma = tune(\"sigma\")   ) %>%   set_engine(\"kernlab\") %>%   set_mode(\"regression\")  # extend the recipe svm_rec <-   tree_frogs_rec %>%   step_dummy(all_nominal_predictors()) %>%   step_zv(all_predictors()) %>%   step_impute_mean(all_numeric_predictors()) %>%   step_corr(all_predictors()) %>%   step_normalize(all_numeric_predictors()) wf_set <-    workflow_set(     preproc = list(rec1 = knn_rec, rec2 = lin_reg_rec,     rec3 = svm_rec),     models =  list(knn = knn_spec, lin_reg = lin_reg_spec, svm = svm_spec),     cross = FALSE   )  wf_set #> # A workflow set/tibble: 3 × 4 #>   wflow_id     info             option    result     #>   <chr>        <list>           <list>    <list>     #> 1 rec1_knn     <tibble [1 × 4]> <opts[0]> <list [0]> #> 2 rec2_lin_reg <tibble [1 × 4]> <opts[0]> <list [0]> #> 3 rec3_svm     <tibble [1 × 4]> <opts[0]> <list [0]> wf_set %>%   extract_workflow(\"rec3_svm\") #> ══ Workflow ══════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: svm_rbf() #>  #> ── Preprocessor ────────────────────────────────────────────────────────── #> 5 Recipe Steps #>  #> • step_dummy() #> • step_zv() #> • step_impute_mean() #> • step_corr() #> • step_normalize() #>  #> ── Model ───────────────────────────────────────────────────────────────── #> Radial Basis Function Support Vector Machine Model Specification (regression) #>  #> Main Arguments: #>   cost = tune(\"cost\") #>   rbf_sigma = tune(\"sigma\") #>  #> Computational engine: kernlab wf_set <-   wf_set %>%   option_add(     control = control_stack_grid(),     metrics = metric   ) wf_set_trained <-   workflow_map(     wf_set,     fn = \"tune_grid\",     resamples = folds   )  wf_set_trained #> # A workflow set/tibble: 3 × 4 #>   wflow_id     info             option    result    #>   <chr>        <list>           <list>    <list>    #> 1 rec1_knn     <tibble [1 × 4]> <opts[3]> <tune[+]> #> 2 rec2_lin_reg <tibble [1 × 4]> <opts[3]> <rsmp[+]> #> 3 rec3_svm     <tibble [1 × 4]> <opts[3]> <tune[+]> extract_workflow_set_result(wf_set_trained, id = \"rec1_knn\") %>%   collect_metrics(summarize = TRUE) #> # A tibble: 10 × 7 #>        k .metric .estimator  mean     n std_err .config               #>    <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                 #>  1     1 rmse    standard    81.3     5    4.37 Preprocessor1_Model01 #>  2     3 rmse    standard    69.6     5    3.57 Preprocessor1_Model02 #>  3     5 rmse    standard    63.7     5    3.30 Preprocessor1_Model03 #>  4     6 rmse    standard    62.3     5    3.12 Preprocessor1_Model04 #>  5     7 rmse    standard    61.2     5    2.95 Preprocessor1_Model05 #>  6     9 rmse    standard    59.8     5    2.82 Preprocessor1_Model06 #>  7    10 rmse    standard    59.3     5    2.83 Preprocessor1_Model07 #>  8    11 rmse    standard    59.0     5    2.82 Preprocessor1_Model08 #>  9    13 rmse    standard    58.5     5    2.84 Preprocessor1_Model09 #> 10    15 rmse    standard    58.2     5    2.88 Preprocessor1_Model10"},{"path":"https://stacks.tidymodels.org/dev/articles/workflowsets.html","id":"putting-together-a-stack","dir":"Articles","previous_headings":"","what":"Putting together a stack","title":"Stacking With Workflow Sets","text":"Building stacked ensemble, now, takes even fewer lines individual workflows: results obtained building model stack workflow sets identical result building model stack individual workflows. make sure right trade-minimizing number members optimizing performance, can use:  results good enough, blend_predictions() called different values penalty. , blend_predictions() picks penalty parameter numerically optimal results. see top results:  identify model configurations assigned stacking coefficients, can make use collect_parameters() function: object now ready predict new data! Juxtaposing predictions true data:  Looks like predictions decent! stacks predictions perform, though, compared members’ predictions? can use type = \"members\" argument generate predictions ensemble members. Now, evaluating root mean squared error model: can see, stacked ensemble outperforms member models, though closely followed one members. Voila! ’ve now made use stacks workflowsets packages predict red-eyed tree frog embryo hatching using stacked ensemble!","code":"tree_frogs_model_st <-    # initialize the stack   stacks() %>%   # add candidate members   add_candidates(wf_set_trained) %>%   # determine how to combine their predictions   blend_predictions() %>%   # fit the candidates with nonzero stacking coefficients   fit_members()  tree_frogs_model_st #> # A tibble: 4 × 3 #>   member           type             weight #>   <chr>            <chr>             <dbl> #> 1 rec3_svm_1_06    svm_rbf          0.779  #> 2 rec2_lin_reg_1_1 linear_reg       0.275  #> 3 rec1_knn_1_08    nearest_neighbor 0.190  #> 4 rec1_knn_1_07    nearest_neighbor 0.0205 autoplot(tree_frogs_model_st) autoplot(tree_frogs_model_st, type = \"weights\") collect_parameters(tree_frogs_model_st, \"rec3_svm\") #> # A tibble: 10 × 4 #>    member            cost    sigma  coef #>    <chr>            <dbl>    <dbl> <dbl> #>  1 rec3_svm_1_01  0.185   1.17e- 4 0     #>  2 rec3_svm_1_02  1.23    2.39e- 7 0     #>  3 rec3_svm_1_03  0.0195  3.37e- 5 0     #>  4 rec3_svm_1_04 15.2     4.78e- 8 0     #>  5 rec3_svm_1_05  2.97    1.30e- 6 0     #>  6 rec3_svm_1_06  0.134   5.62e- 2 0.779 #>  7 rec3_svm_1_07  0.00163 3.01e- 3 0     #>  8 rec3_svm_1_08  4.08    2.98e- 1 0     #>  9 rec3_svm_1_09  0.00429 3.45e-10 0     #> 10 rec3_svm_1_10  0.0280  1.54e- 9 0 tree_frogs_test <-    tree_frogs_test %>%   bind_cols(predict(tree_frogs_model_st, .)) ggplot(tree_frogs_test) +   aes(     x = latency,     y = .pred   ) +   geom_point() +   coord_obs_pred() member_preds <-    tree_frogs_test %>%   select(latency) %>%   bind_cols(predict(tree_frogs_model_st, tree_frogs_test, members = TRUE)) map(member_preds, rmse_vec, truth = member_preds$latency) %>%   as_tibble() #> # A tibble: 1 × 6 #>   latency .pred rec1_knn_1_07 rec1_knn_1_08 rec2_lin_reg_1_1 rec3_svm_1_06 #>     <dbl> <dbl>         <dbl>         <dbl>            <dbl>         <dbl> #> 1       0  53.9          56.2          56.2             55.5          57.3"},{"path":"https://stacks.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Couch. Author, maintainer. Max Kuhn. Author. . Copyright holder, funder.","code":""},{"path":"https://stacks.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Couch S, Kuhn M (2024). stacks: Tidy Model Stacking. R package version 1.0.5.9000, https://github.com/tidymodels/stacks, https://stacks.tidymodels.org/.","code":"@Manual{,   title = {stacks: Tidy Model Stacking},   author = {Simon Couch and Max Kuhn},   year = {2024},   note = {R package version 1.0.5.9000, https://github.com/tidymodels/stacks},   url = {https://stacks.tidymodels.org/}, }"},{"path":"https://stacks.tidymodels.org/dev/index.html","id":"stacks---tidy-model-stacking-","dir":"","previous_headings":"","what":"stacks - tidy model stacking","title":"Tidy Model Stacking","text":"stacks R package model stacking aligns tidymodels. Model stacking ensembling method takes outputs many models combines generate new model—referred ensemble package—generates predictions informed members. process goes something like : Define candidate ensemble members using functionality rsample, parsnip, workflows, recipes, tune Initialize data_stack object stacks() Iteratively add candidate ensemble members data_stack add_candidates() Evaluate combine predictions blend_predictions() Fit candidate ensemble members non-zero stacking coefficients fit_members() Predict new data predict() can install package following code: Install development version : stacks generalized respect : Model type: model type implemented parsnip extension packages fair game add stacks model stack. ’s table many implemented model types tidymodels core, link article implementing model classes well. Cross-validation scheme: resampling algorithm implemented rsample extension packages fair game resampling data use training model stack. Error metric: metric function implemented yardstick extension packages fair game evaluating model stacks members. package provides infrastructure creating metric functions well! stacks uses regularized linear model combine predictions ensemble members, though model type one many possible learning algorithms used fit stacked ensemble model. implementations additional ensemble learning algorithms, check h2o SuperLearner. Rather diving right implementation, ’ll focus pieces fit together, conceptually, building ensemble stacks. See basics vignette example API action!","code":"install.packages(\"stacks\") # install.packages(\"pak\") pak::pak(\"tidymodels/stacks\")"},{"path":"https://stacks.tidymodels.org/dev/index.html","id":"a-grammar","dir":"","previous_headings":"","what":"a grammar","title":"Tidy Model Stacking","text":"highest level, ensembles formed model definitions. package, model definitions instance minimal workflow, containing model specification (defined parsnip package) , optionally, preprocessor (defined recipes package). Model definitions specify form candidate ensemble members. used ensemble, model definitions must share resample. rsample rset object, paired model definitions, can used generate tuning/fitting results objects candidate ensemble members tune. Candidate members first come together data_stack object add_candidates() function. Principally, objects just tibbles, first column gives true outcome assessment set (portion training set used model validation), remaining columns give predictions candidate ensemble member. (outcome numeric, ’s one column per candidate ensemble member. Classification requires many columns per candidate levels outcome variable.) also bring along extra attributes keep track model definitions. , data stack can evaluated using blend_predictions() determine best combine outputs candidate members. stacking literature, process commonly called metalearning. outputs member likely highly correlated. Thus, depending degree regularization choose, coefficients inputs (possibly) many members zero —predictions influence final output, terms thus thrown . stacking coefficients determine candidate ensemble members become ensemble members. Candidates non-zero stacking coefficients fitted whole training set, altogether making model_stack object. model stack object, outputted fit_members(), ready predict new data! trained ensemble members often referred base models stacking literature. full visual outline steps can found . API package closely mirrors ideas. See basics vignette example grammar implemented!","code":""},{"path":"https://stacks.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"contributing","title":"Tidy Model Stacking","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help. stacks package, test objects take long build every commit. contribution changes structure data_stack model_stacks objects, please regenerate test objects running scripts man-roxygen/example_models.Rmd, including chunk options eval = FALSE.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Add model definitions to a data stack — add_candidates","title":"Add model definitions to a data stack — add_candidates","text":"add_candidates() collates assessment set predictions additional attributes supplied model definition (.e. set \"candidates\") data stack. Behind scenes, data stack objects just tibble::tbl_dfs, first column gives true response values, remaining columns give assessment set predictions candidate. regression setting, one column per ensemble member. classification settings, many columns per candidate ensemble member levels outcome variable. initialize data stack, use stacks() function. Model definitions appended data stack iteratively using several calls add_candidates(). Data stacks evaluated using blend_predictions() function.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add model definitions to a data stack — add_candidates","text":"","code":"add_candidates(   data_stack,   candidates,   name = deparse(substitute(candidates)),   ... )"},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add model definitions to a data stack — add_candidates","text":"data_stack data_stack object. candidates (set ) model definition(s) defining candidate model stack members. inherit tune_results workflow_set. tune_results: object outputted tune::tune_grid(), tune::tune_bayes(), tune::fit_resamples(). workflow_set: object outputted workflowsets::workflow_map(). approach allows supplying multiple sets candidate members one call add_candidates. See \"Stacking Workflow Sets\" article package website example code! Regardless, results must fitted control settings save_pred = TRUE, save_workflow = TRUE—see control_stack_grid(), control_stack_bayes(), control_stack_resamples() documentation helper functions. name label model definition—defaults name candidates object. Ignored candidates inherits workflow_set. ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add model definitions to a data stack — add_candidates","text":"data_stack object–see stacks() details!","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":"example-data","dir":"Reference","previous_headings":"","what":"Example Data","title":"Add model definitions to a data stack — add_candidates","text":"package provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. See ?example_data learn objects, well browse source code generated .","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/add_candidates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add model definitions to a data stack — add_candidates","text":"","code":"# see the \"Example Data\" section above for # clarification on the objects used in these examples!  # put together a data stack using # tuning results for regression models reg_st <-    stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_svm) %>%   add_candidates(reg_res_sp)    reg_st #> # A data stack with 3 model definitions and 16 candidate members: #> #   reg_res_lr: 1 model configuration #> #   reg_res_svm: 5 model configurations #> #   reg_res_sp: 10 model configurations #> # Outcome: latency (numeric)    # do the same with multinomial classification models class_st <-   stacks() %>%   add_candidates(class_res_nn) %>%   add_candidates(class_res_rf) #> Warning: Predictions from 1 candidate were identical to those from existing #> candidates and were removed from the data stack.    class_st #> # A data stack with 2 model definitions and 10.6666666666667 candidate members: #> #   class_res_nn: 1 model configuration #> #   class_res_rf: 9.66666666666667 model configurations #> # Outcome: reflex (factor)    # ...or binomial classification models log_st <-   stacks() %>%   add_candidates(log_res_nn) %>%   add_candidates(log_res_rf)    log_st #> # A data stack with 2 model definitions and 11 candidate members: #> #   log_res_nn: 1 model configuration #> #   log_res_rf: 10 model configurations #> # Outcome: hatched (factor)    # use custom names for each model: log_st2 <-   stacks() %>%   add_candidates(log_res_nn, name = \"neural_network\") %>%   add_candidates(log_res_rf, name = \"random_forest\")    log_st2 #> # A data stack with 2 model definitions and 11 candidate members: #> #   neural_network: 1 model configuration #> #   random_forest: 10 model configurations #> # Outcome: hatched (factor)    # these objects would likely then be # passed to blend_predictions(): log_st2 %>% blend_predictions() #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 11 possible candidate members, the ensemble retained 3. #> Penalty: 0.001. #> Mixture: 1. #>  #> The 3 highest weighted member classes are: #> # A tibble: 3 × 3 #>   member                      type        weight #>   <chr>                       <chr>        <dbl> #> 1 .pred_no_neural_network_1_1 mlp         7.39   #> 2 .pred_no_random_forest_1_05 rand_forest 3.42   #> 3 .pred_no_random_forest_1_02 rand_forest 0.0281 #>  #> Members have not yet been fitted with `fit_members()`."},{"path":"https://stacks.tidymodels.org/dev/reference/augment.model_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment a model stack — augment.model_stack","title":"Augment a model stack — augment.model_stack","text":"Augment model stack","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/augment.model_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment a model stack — augment.model_stack","text":"","code":"# S3 method for class 'model_stack' augment(x, new_data, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/augment.model_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment a model stack — augment.model_stack","text":"x fitted model stack; see fit_members(). new_data rectangular data object, data frame. ... Additional arguments passed predict.model_stack. particular, see type members.","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/autoplot.linear_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results of a stacked ensemble model. — autoplot.linear_stack","title":"Plot results of a stacked ensemble model. — autoplot.linear_stack","text":"Plot results stacked ensemble model.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/autoplot.linear_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results of a stacked ensemble model. — autoplot.linear_stack","text":"","code":"# S3 method for class 'linear_stack' autoplot(object, type = \"performance\", n = Inf, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/autoplot.linear_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results of a stacked ensemble model. — autoplot.linear_stack","text":"object linear_stack object outputted blend_predictions() fit_members(). type single character string plot type values \"performance\", \"members\", \"weights\". n integer many members weights plot type = \"weights\". multi-class data, total number weights across classes; otherwise equal number members. ... currently used.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/autoplot.linear_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results of a stacked ensemble model. — autoplot.linear_stack","text":"ggplot object.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/autoplot.linear_stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot results of a stacked ensemble model. — autoplot.linear_stack","text":"\"performance\" plot shows relationship lasso penalty resampled performance metrics. latter includes average number ensemble members. plot can helpful understanding penalty values reasonable. \"members\" plot shows relationship average number ensemble members performance metrics. point different penalty value. Neither \"performance\" \"members\" plots helpful single penalty used. \"weights\" plot shows blending weights top ensemble members. results final penalty value used fit ensemble.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/axe_model_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Axing a model_stack. — axe_model_stack","title":"Axing a model_stack. — axe_model_stack","text":"Axing model_stack. Remove call. Remove controls used training. Remove training data. Remove environments. Remove fitted values.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/axe_model_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Axing a model_stack. — axe_model_stack","text":"","code":"# S3 method for class 'model_stack' axe_call(x, verbose = FALSE, ...)  # S3 method for class 'model_stack' axe_ctrl(x, verbose = FALSE, ...)  # S3 method for class 'model_stack' axe_data(x, verbose = FALSE, ...)  # S3 method for class 'model_stack' axe_env(x, verbose = FALSE, ...)  # S3 method for class 'model_stack' axe_fitted(x, verbose = FALSE, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/axe_model_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Axing a model_stack. — axe_model_stack","text":"x model object verbose Print information time axe method executed. Notes much memory released functions disabled. Default FALSE. ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/axe_model_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Axing a model_stack. — axe_model_stack","text":"Axed model_stack object.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/axe_model_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Axing a model_stack. — axe_model_stack","text":"","code":"if (FALSE) {  # build a regression model stack st <-   stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_sp) %>%   blend_predictions() %>%   fit_members()    # remove any of the \"butcherable\" # elements individually axe_call(st) axe_ctrl(st) axe_data(st) axe_fitted(st) axe_env(st)  # or do it all at once! butchered_st <- butcher(st, verbose = TRUE)  format(object.size(st)) format(object.size(butchered_st)) }"},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine stacking coefficients from a data stack — blend_predictions","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"Evaluates data stack fitting regularized model assessment predictions candidate member predict true outcome. process determines \"stacking coefficients\" model stack. stacking coefficients used weight predictions candidate (represented unique column data stack), given betas LASSO model fitting true outcome predictions given remaining columns data stack. Candidates non-zero stacking coefficients model stack members, need trained full training set (rather just assessment set) fit_members(). function typically used number calls add_candidates().","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"","code":"blend_predictions(   data_stack,   penalty = 10^(-6:-1),   mixture = 1,   non_negative = TRUE,   metric = NULL,   control = tune::control_grid(),   times = 25,   ... )"},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"data_stack data_stack object penalty numeric vector proposed values total amount regularization used member weighting. Higher penalties generally result fewer members included resulting model stack, vice versa. package tune grid formed cross product penalty mixture arguments. mixture number zero one (inclusive) giving proportion L1 regularization (.e. lasso) model. mixture = 1 indicates pure lasso model, mixture = 0 indicates ridge regression, values (0, 1) indicate elastic net. package tune grid formed cross product penalty mixture arguments. non_negative logical giving whether restrict stacking coefficients non-negative values. TRUE (default), 0 passed lower.limits argument glmnet::glmnet() fitting model data stack. Otherwise, -Inf. metric call yardstick::metric_set(). metric(s) use tuning lasso penalty stacking coefficients. Default values determined tune::tune_grid() outcome class. control object inheriting control_grid passed model determining stacking coefficients. See tune::control_grid() documentation details possible values. Note extract entry overwritten internally. times Number bootstrap samples tuned model determines stacking coefficients. See rsample::bootstraps() learn . ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"model_stack object—model_stacks largely contain elements data_stacks, primary data objects shift assessment set predictions member models.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"Note regularized linear model one many possible learning algorithms used fit stacked ensemble model. implementations additional ensemble learning algorithms, see h2o::h2o.stackedEnsemble() SuperLearner::SuperLearner().","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"example-data","dir":"Reference","previous_headings":"","what":"Example Data","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"package provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. See ?example_data learn objects, well browse source code generated .","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/blend_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine stacking coefficients from a data stack — blend_predictions","text":"","code":"# see the \"Example Data\" section above for # clarification on the objects used in these examples!  # put together a data stack reg_st <-    stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_svm) %>%   add_candidates(reg_res_sp)    reg_st #> # A data stack with 3 model definitions and 16 candidate members: #> #   reg_res_lr: 1 model configuration #> #   reg_res_svm: 5 model configurations #> #   reg_res_sp: 10 model configurations #> # Outcome: latency (numeric)  # evaluate the data stack reg_st %>%   blend_predictions() #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 1e-06. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.638  #> 2 reg_res_sp_03_1 linear_reg 0.486  #> 3 reg_res_sp_10_1 linear_reg 0.0482 #>  #> Members have not yet been fitted with `fit_members()`.  # include fewer models by proposing higher penalties reg_st %>%    blend_predictions(penalty = c(.5, 1)) #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 1. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.620  #> 2 reg_res_sp_03_1 linear_reg 0.472  #> 3 reg_res_sp_10_1 linear_reg 0.0517 #>  #> Members have not yet been fitted with `fit_members()`.  # allow for negative stacking coefficients  # with the non_negative argument reg_st %>%    blend_predictions(non_negative = FALSE) #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 12. #> Penalty: 0.1. #> Mixture: 1. #>  #> The 10 highest weighted members are: #> # A tibble: 10 × 3 #>    member          type        weight #>    <chr>           <chr>        <dbl> #>  1 reg_res_svm_1_1 svm_rbf    -10.5   #>  2 reg_res_sp_04_1 linear_reg  -1.38  #>  3 reg_res_sp_05_1 linear_reg   1.35  #>  4 reg_res_svm_1_3 svm_rbf      1.19  #>  5 reg_res_svm_1_2 svm_rbf     -0.963 #>  6 reg_res_sp_03_1 linear_reg   0.642 #>  7 reg_res_sp_01_1 linear_reg  -0.400 #>  8 reg_res_sp_10_1 linear_reg   0.319 #>  9 reg_res_sp_06_1 linear_reg   0.193 #> 10 reg_res_lr_1_1  linear_reg   0.183 #>  #> Members have not yet been fitted with `fit_members()`.    # use a custom metric in tuning the lasso penalty library(yardstick) reg_st %>%    blend_predictions(metric = metric_set(rmse)) #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 0.1. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.636  #> 2 reg_res_sp_03_1 linear_reg 0.484  #> 3 reg_res_sp_10_1 linear_reg 0.0496 #>  #> Members have not yet been fitted with `fit_members()`.    # pass control options for stack blending reg_st %>%    blend_predictions(     control = tune::control_grid(allow_par = TRUE)   ) #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 0.1. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.636  #> 2 reg_res_sp_03_1 linear_reg 0.484  #> 3 reg_res_sp_10_1 linear_reg 0.0496 #>  #> Members have not yet been fitted with `fit_members()`.   # to speed up the stacking process for preliminary # results, bump down the `times` argument: reg_st %>%    blend_predictions(times = 5) #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 1e-06. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.638  #> 2 reg_res_sp_03_1 linear_reg 0.486  #> 3 reg_res_sp_10_1 linear_reg 0.0482 #>  #> Members have not yet been fitted with `fit_members()`.    # the process looks the same with  # multinomial classification models class_st <-   stacks() %>%   add_candidates(class_res_nn) %>%   add_candidates(class_res_rf) %>%   blend_predictions() #> Warning: Predictions from 1 candidate were identical to those from existing #> candidates and were removed from the data stack.    class_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 21 possible candidate members, the ensemble retained 8. #> Penalty: 0.01. #> Mixture: 1. #> Across the 3 classes, there are an average of 4 coefficients per class. #>  #> The 8 highest weighted member classes are: #> # A tibble: 8 × 4 #>   member                       type           weight class #>   <chr>                        <chr>           <dbl> <fct> #> 1 .pred_full_class_res_nn_1_1  mlp         23.3      full  #> 2 .pred_mid_class_res_nn_1_1   mlp          1.89     mid   #> 3 .pred_mid_class_res_rf_1_06  rand_forest  1.71     mid   #> 4 .pred_mid_class_res_rf_1_10  rand_forest  1.17     mid   #> 5 .pred_full_class_res_rf_1_03 rand_forest  0.407    full  #> 6 .pred_full_class_res_rf_1_05 rand_forest  0.222    full  #> 7 .pred_full_class_res_rf_1_01 rand_forest  0.00160  full  #> 8 .pred_full_class_res_rf_1_02 rand_forest  0.000322 full  #>  #> Members have not yet been fitted with `fit_members()`.  # ...or binomial classification models log_st <-   stacks() %>%   add_candidates(log_res_nn) %>%   add_candidates(log_res_rf) %>%   blend_predictions()    log_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 11 possible candidate members, the ensemble retained 3. #> Penalty: 1e-04. #> Mixture: 1. #>  #> The 3 highest weighted member classes are: #> # A tibble: 3 × 3 #>   member                   type        weight #>   <chr>                    <chr>        <dbl> #> 1 .pred_no_log_res_nn_1_1  mlp         7.41   #> 2 .pred_no_log_res_rf_1_05 rand_forest 3.44   #> 3 .pred_no_log_res_rf_1_02 rand_forest 0.0638 #>  #> Members have not yet been fitted with `fit_members()`."},{"path":"https://stacks.tidymodels.org/dev/reference/build_linear_predictor.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an R expression for a linear predictor from a data frame of terms and coefficients — build_linear_predictor","title":"Creates an R expression for a linear predictor from a data frame of terms and coefficients — build_linear_predictor","text":"Creates R expression linear predictor data frame terms coefficients","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/build_linear_predictor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an R expression for a linear predictor from a data frame of terms and coefficients — build_linear_predictor","text":"","code":"build_linear_predictor(x, ...)  # S3 method for class '`_elnet`' build_linear_predictor(x, ...)  # S3 method for class '`_lognet`' build_linear_predictor(x, ...)  # S3 method for class '`_multnet`' build_linear_predictor(x, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/build_linear_predictor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an R expression for a linear predictor from a data frame of terms and coefficients — build_linear_predictor","text":"x object uses glmnet::glmnet() model numeric predictors. ... currently used.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/build_linear_predictor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an R expression for a linear predictor from a data frame of terms and coefficients — build_linear_predictor","text":"R expression list R expressions, depending type model used.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect candidate parameters and stacking coefficients — collect_parameters","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"function help situate candidates within stack. Takes data stack model stack candidate name returns tibble mapping candidate/member names hyperparameters (, model stack, stacking coefficients well).","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"","code":"collect_parameters(stack, candidates, ...)  # Default S3 method collect_parameters(stack, candidates, ...)  # S3 method for class 'data_stack' collect_parameters(stack, candidates, ...)  # S3 method for class 'model_stack' collect_parameters(stack, candidates, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"stack data_stack model_stack object. candidates name candidates collect parameters . either name argument supplied add_candidates() , supplied, name object supplied candidates argument add_candidates(). ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"tibble::tbl_df information member names hyperparameters.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":"example-data","dir":"Reference","previous_headings":"","what":"Example Data","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"package provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. See ?example_data learn objects, well browse source code generated .","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/collect_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect candidate parameters and stacking coefficients — collect_parameters","text":"","code":"# see the \"Example Data\" section above for # clarification on the objects used in these examples!  # put together a data stack using # tuning results for regression models reg_st <-    stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_svm) %>%   add_candidates(reg_res_sp, \"spline\")    reg_st #> # A data stack with 3 model definitions and 16 candidate members: #> #   reg_res_lr: 1 model configuration #> #   reg_res_svm: 5 model configurations #> #   spline: 10 model configurations #> # Outcome: latency (numeric)    # check out the hyperparameters for some of the candidates collect_parameters(reg_st, \"reg_res_svm\") #> # A tibble: 5 × 3 #>   member             cost     rbf_sigma #>   <chr>             <dbl>         <dbl> #> 1 reg_res_svm_1_1 3.09    0.000000465   #> 2 reg_res_svm_1_2 9.56    0.00346       #> 3 reg_res_svm_1_3 0.321   0.0256        #> 4 reg_res_svm_1_4 0.00486 0.00000251    #> 5 reg_res_svm_1_5 0.0146  0.00000000959  collect_parameters(reg_st, \"spline\") #> # A tibble: 10 × 2 #>    member        age #>    <chr>       <int> #>  1 spline_01_1    12 #>  2 spline_02_1     6 #>  3 spline_03_1    15 #>  4 spline_04_1     5 #>  5 spline_05_1     3 #>  6 spline_06_1    13 #>  7 spline_07_1     9 #>  8 spline_08_1    10 #>  9 spline_09_1     7 #> 10 spline_10_1     2  # blend the data stack to view the hyperparameters  # along with the stacking coefficients! collect_parameters(   reg_st %>% blend_predictions(),    \"spline\" ) #> # A tibble: 10 × 3 #>    member        age   coef #>    <chr>       <int>  <dbl> #>  1 spline_01_1    12 0      #>  2 spline_02_1     6 0      #>  3 spline_03_1    15 0.484  #>  4 spline_04_1     5 0      #>  5 spline_05_1     3 0      #>  6 spline_06_1    13 0      #>  7 spline_07_1     9 0      #>  8 spline_08_1    10 0      #>  9 spline_09_1     7 0      #> 10 spline_10_1     2 0.0496"},{"path":"https://stacks.tidymodels.org/dev/reference/control_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Control wrappers — control_stack","title":"Control wrappers — control_stack","text":"Supply light wrappers control argument tune::tune_grid(), tune::tune_bayes(), tune::fit_resamples() call return needed elements use data stack. functions return appropriate control grid ensure assessment set predictions information model specifications preprocessors, supplied resampling results object! integrate stack settings existing control settings, note functions just call appropriate tune::control_* function arguments save_pred = TRUE, save_workflow = TRUE.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/control_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control wrappers — control_stack","text":"","code":"control_stack_grid()  control_stack_resamples()  control_stack_bayes()"},{"path":"https://stacks.tidymodels.org/dev/reference/control_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control wrappers — control_stack","text":"tune::control_grid, tune::control_bayes, tune::control_resamples object.","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/control_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control wrappers — control_stack","text":"","code":"library(tune)  # these are the same! control_stack_grid() #> grid/resamples control object control_grid(save_pred = TRUE, save_workflow = TRUE) #> grid/resamples control object"},{"path":"https://stacks.tidymodels.org/dev/reference/example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Objects — example_data","title":"Example Objects — example_data","text":"stacks provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos!","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Objects — example_data","text":"","code":"reg_res_svm  reg_res_sp  reg_res_lr  reg_folds  class_res_nn  class_res_rf  class_folds  log_res_nn  log_res_rf"},{"path":"https://stacks.tidymodels.org/dev/reference/example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Objects — example_data","text":"object class tune_results (inherits tbl_df, tbl, data.frame) 5 rows 5 columns. object class tune_results (inherits tbl_df, tbl, data.frame) 5 rows 5 columns. object class resample_results (inherits tune_results, tbl_df, tbl, data.frame) 5 rows 5 columns. object class vfold_cv (inherits rset, tbl_df, tbl, data.frame) 5 rows 2 columns. object class resample_results (inherits tune_results, tbl_df, tbl, data.frame) 5 rows 5 columns. object class tune_results (inherits tbl_df, tbl, data.frame) 5 rows 5 columns. object class vfold_cv (inherits rset, tbl_df, tbl, data.frame) 5 rows 2 columns. object class resample_results (inherits tune_results, tbl_df, tbl, data.frame) 5 rows 5 columns. object class tune_results (inherits tbl_df, tbl, data.frame) 5 rows 5 columns.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/example_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Objects — example_data","text":"Julie Jung et al. (2020) Multimodal mechanosensing enables treefrog embryos escape egg-predators. doi:10.1242/jeb.236141","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Objects — example_data","text":"Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. source code generating objects given .","code":"# setup: packages, data, resample, basic recipe ------------------------ library(stacks) library(tune) library(rsample) library(parsnip) library(workflows) library(recipes) library(yardstick) library(workflowsets)  set.seed(1)  ctrl_grid <-   tune::control_grid(     save_pred = TRUE,     save_workflow = TRUE   )  ctrl_res <-   tune::control_resamples(     save_pred = TRUE,     save_workflow = TRUE   )  # for regression, predict latency to hatch (excluding NAs) tree_frogs_reg <-   tree_frogs %>%   filter(!is.na(latency)) %>%   select(-clutch, -hatched)  set.seed(1) tree_frogs_reg_split <- rsample::initial_split(tree_frogs_reg)  set.seed(1) tree_frogs_reg_train <- rsample::training(tree_frogs_reg_split)  set.seed(1) tree_frogs_reg_test  <- rsample::testing(tree_frogs_reg_split)  set.seed(1) reg_folds <- rsample::vfold_cv(tree_frogs_reg_train, v = 5)  tree_frogs_reg_rec <-   recipes::recipe(latency ~ ., data = tree_frogs_reg_train) %>%   recipes::step_dummy(recipes::all_nominal()) %>%   recipes::step_zv(recipes::all_predictors())  metric <- yardstick::metric_set(yardstick::rmse)  # linear regression --------------------------------------- lin_reg_spec <-   parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\")  reg_wf_lr <-   workflows::workflow() %>%   workflows::add_model(lin_reg_spec) %>%   workflows::add_recipe(tree_frogs_reg_rec)  set.seed(1) reg_res_lr <-   tune::fit_resamples(     object = reg_wf_lr,     resamples = reg_folds,     metrics = metric,     control = ctrl_res   )  # SVM regression ---------------------------------- svm_spec <-   parsnip::svm_rbf(     cost = tune::tune(),     rbf_sigma = tune::tune()   ) %>%   parsnip::set_engine(\"kernlab\") %>%   parsnip::set_mode(\"regression\")  reg_wf_svm <-   workflows::workflow() %>%   workflows::add_model(svm_spec) %>%   workflows::add_recipe(tree_frogs_reg_rec)  set.seed(1) reg_res_svm <-   tune::tune_grid(     object = reg_wf_svm,     resamples = reg_folds,     grid = 5,     control = ctrl_grid   )  # spline regression --------------------------------------- spline_rec <-   tree_frogs_reg_rec %>%   recipes::step_ns(age, deg_free = tune::tune(\"age\"))  reg_wf_sp <-   workflows::workflow() %>%   workflows::add_model(lin_reg_spec) %>%   workflows::add_recipe(spline_rec)  set.seed(1) reg_res_sp <-   tune::tune_grid(     object = reg_wf_sp,     resamples = reg_folds,     metrics = metric,     control = ctrl_grid   )  # classification - preliminaries ----------------------------------- tree_frogs_class <-   tree_frogs %>%   dplyr::select(-c(clutch, latency))  set.seed(1) tree_frogs_class_split <- rsample::initial_split(tree_frogs_class)  set.seed(1) tree_frogs_class_train <- rsample::training(tree_frogs_class_split)  set.seed(1) tree_frogs_class_test  <- rsample::testing(tree_frogs_class_split)  set.seed(1) class_folds <- rsample::vfold_cv(tree_frogs_class_train, v = 5)  tree_frogs_class_rec <-   recipes::recipe(reflex ~ ., data = tree_frogs_class_train) %>%   recipes::step_dummy(recipes::all_nominal(), -reflex) %>%   recipes::step_zv(recipes::all_predictors()) %>%   recipes::step_normalize(recipes::all_numeric())  # random forest classification -------------------------------------- rand_forest_spec <-   parsnip::rand_forest(     mtry = tune::tune(),     trees = 500,     min_n = tune::tune()   ) %>%   parsnip::set_mode(\"classification\") %>%   parsnip::set_engine(\"ranger\")  class_wf_rf <-   workflows::workflow() %>%   workflows::add_recipe(tree_frogs_class_rec) %>%   workflows::add_model(rand_forest_spec)  set.seed(1) class_res_rf <-   tune::tune_grid(     object = class_wf_rf,     resamples = class_folds,     grid = 10,     control = ctrl_grid   )  # neural network classification ------------------------------------- nnet_spec <-   mlp(hidden_units = 5, penalty = 0.01, epochs = 100) %>%   set_mode(\"classification\") %>%   set_engine(\"nnet\")  class_wf_nn <-   workflows::workflow() %>%   workflows::add_recipe(tree_frogs_class_rec) %>%   workflows::add_model(nnet_spec)  set.seed(1) class_res_nn <-   tune::fit_resamples(     object = class_wf_nn,     resamples = class_folds,     control = ctrl_res   )  # binary classification -------------------------------- tree_frogs_2_class_rec <-   recipes::recipe(hatched ~ ., data = tree_frogs_class_train) %>%   recipes::step_dummy(recipes::all_nominal(), -hatched) %>%   recipes::step_zv(recipes::all_predictors()) %>%   recipes::step_normalize(recipes::all_numeric())  set.seed(1) rand_forest_spec_2 <-   parsnip::rand_forest(     mtry = tune(),     trees = 500,     min_n = tune()   ) %>%   parsnip::set_mode(\"classification\") %>%   parsnip::set_engine(\"ranger\")  log_wf_rf <-   workflows::workflow() %>%   workflows::add_recipe(tree_frogs_2_class_rec) %>%   workflows::add_model(rand_forest_spec_2)  set.seed(1) log_res_rf <-   tune::tune_grid(     object = log_wf_rf,     resamples = class_folds,     grid = 10,     control = ctrl_grid   )  nnet_spec_2 <-   parsnip::mlp(epochs = 100, hidden_units = 5, penalty = 0.1) %>%   parsnip::set_mode(\"classification\") %>%   parsnip::set_engine(\"nnet\", verbose = 0)  log_wf_nn <-   workflows::workflow() %>%   workflows::add_recipe(tree_frogs_2_class_rec) %>%   workflows::add_model(nnet_spec_2)  set.seed(1) log_res_nn <-   tune::fit_resamples(     object = log_wf_nn,     resamples = class_folds,     control = ctrl_res   )"},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit model stack members with non-zero stacking coefficients — fit_members","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"evaluating data stack blend_predictions(), number candidates nonzero stacking coefficients. candidates referred \"members.\" Since members' predictions ultimately inform model stack's predictions, members trained full training set using fit_members().","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"","code":"fit_members(model_stack, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"model_stack model_stack object outputted blend_predictions(). ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"model_stack object subclass linear_stack—fitted model contains necessary components predict new data.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"fit members parallel, please create plan future package. See documentation future::plan() examples.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"example-data","dir":"Reference","previous_headings":"","what":"Example Data","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"package provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. See ?example_data learn objects, well browse source code generated .","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/fit_members.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit model stack members with non-zero stacking coefficients — fit_members","text":"","code":"# see the \"Example Data\" section above for # clarification on the objects used in these examples!  # put together a data stack reg_st <-    stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_svm) %>%   add_candidates(reg_res_sp)    reg_st #> # A data stack with 3 model definitions and 16 candidate members: #> #   reg_res_lr: 1 model configuration #> #   reg_res_svm: 5 model configurations #> #   reg_res_sp: 10 model configurations #> # Outcome: latency (numeric)  # evaluate the data stack and fit the member models reg_st %>%   blend_predictions() %>%   fit_members() #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 16 possible candidate members, the ensemble retained 3. #> Penalty: 1e-06. #> Mixture: 1. #>  #> The 3 highest weighted members are: #> # A tibble: 3 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_svm_1_3 svm_rbf    0.638  #> 2 reg_res_sp_03_1 linear_reg 0.486  #> 3 reg_res_sp_10_1 linear_reg 0.0482    reg_st #> # A data stack with 3 model definitions and 16 candidate members: #> #   reg_res_lr: 1 model configuration #> #   reg_res_svm: 5 model configurations #> #   reg_res_sp: 10 model configurations #> # Outcome: latency (numeric)    # do the same with multinomial classification models class_st <-   stacks() %>%   add_candidates(class_res_nn) %>%   add_candidates(class_res_rf) %>%   blend_predictions() %>%   fit_members() #> Warning: Predictions from 1 candidate were identical to those from existing #> candidates and were removed from the data stack.    class_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 21 possible candidate members, the ensemble retained 5. #> Penalty: 0.1. #> Mixture: 1. #> Across the 3 classes, there are an average of 2.5 coefficients per class. #>  #> The 5 highest weighted member classes are: #> # A tibble: 5 × 4 #>   member                       type          weight class #>   <chr>                        <chr>          <dbl> <fct> #> 1 .pred_full_class_res_nn_1_1  mlp         12.0     full  #> 2 .pred_mid_class_res_rf_1_06  rand_forest  0.670   mid   #> 3 .pred_full_class_res_rf_1_05 rand_forest  0.101   full  #> 4 .pred_full_class_res_rf_1_07 rand_forest  0.00457 full  #> 5 .pred_full_class_res_rf_1_01 rand_forest  0.00219 full     # ...or binomial classification models log_st <-   stacks() %>%   add_candidates(log_res_nn) %>%   add_candidates(log_res_rf) %>%   blend_predictions() %>%   fit_members()    log_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 11 possible candidate members, the ensemble retained 3. #> Penalty: 1e-05. #> Mixture: 1. #>  #> The 3 highest weighted member classes are: #> # A tibble: 3 × 3 #>   member                   type        weight #>   <chr>                    <chr>        <dbl> #> 1 .pred_no_log_res_nn_1_1  mlp         7.39   #> 2 .pred_no_log_res_rf_1_05 rand_forest 3.43   #> 3 .pred_no_log_res_rf_1_02 rand_forest 0.0834"},{"path":"https://stacks.tidymodels.org/dev/reference/get_expressions.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain prediction equations for all possible values of type — get_expressions","title":"Obtain prediction equations for all possible values of type — get_expressions","text":"Obtain prediction equations possible values type","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/get_expressions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain prediction equations for all possible values of type — get_expressions","text":"","code":"get_expressions(x, ...)  # S3 method for class '`_multnet`' get_expressions(x, ...)  # S3 method for class '`_lognet`' get_expressions(x, ...)  # S3 method for class '`_elnet`' get_expressions(x, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/get_expressions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain prediction equations for all possible values of type — get_expressions","text":"x parsnip model glmnet engine. ... used","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/get_expressions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain prediction equations for all possible values of type — get_expressions","text":"named list prediction equations possibel type.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.data_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicting with a model stack — predict.data_stack","title":"Predicting with a model stack — predict.data_stack","text":"data stack must evaluated blend_predictions() member models fitted fit_members() predict new data.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.data_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicting with a model stack — predict.data_stack","text":"","code":"# S3 method for class 'data_stack' predict(object, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/predict.data_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicting with a model stack — predict.data_stack","text":"object data stack. ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.model_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicting with a model stack — predict.model_stack","title":"Predicting with a model stack — predict.model_stack","text":"Apply model stack create different types predictions.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.model_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicting with a model stack — predict.model_stack","text":"","code":"# S3 method for class 'model_stack' predict(object, new_data, type = NULL, members = FALSE, opts = list(), ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/predict.model_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicting with a model stack — predict.model_stack","text":"object model stack fitted members outputted fit_members(). new_data rectangular data object, data frame. type Format returned predicted values—one \"numeric\", \"class\", \"prob\". NULL, predict() choose appropriate value based model's mode. members Logical. Whether additionally return predictions ensemble members. opts list optional arguments underlying predict function passed parsnip::predict.model_fit member. ... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.model_stack.html","id":"example-data","dir":"Reference","previous_headings":"","what":"Example Data","title":"Predicting with a model stack — predict.model_stack","text":"package provides resampling objects datasets use examples vignettes derived study 1212 red-eyed tree frog embryos! Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely ! Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes. reg_folds class_folds rset cross-fold validation objects rsample, splitting training data regression classification model objects, respectively. tree_frogs_reg_test tree_frogs_class_test analogous testing sets. reg_res_lr, reg_res_svm, reg_res_sp contain regression tuning results linear regression, support vector machine, spline model, respectively, fitting latency (.e. long embryos took hatch response jiggle) tree_frogs data, using variables predictors. Note data underlying models filtered include data embryos hatched response stimulus. class_res_rf class_res_nn contain multiclass classification tuning results random forest neural network classification model, respectively, fitting reflex (measure ear function) data using variables predictors. log_res_rf log_res_nn, contain binary classification tuning results random forest neural network classification model, respectively, fitting hatched (whether embryos hatched response stimulus) using variables predictors. See ?example_data learn objects, well browse source code generated .","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/predict.model_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicting with a model stack — predict.model_stack","text":"","code":"# see the \"Example Data\" section above for # clarification on the data and tuning results # objects used in these examples!  data(tree_frogs_reg_test) data(tree_frogs_class_test)  # build and fit a regression model stack reg_st <-   stacks() %>%   add_candidates(reg_res_lr) %>%   add_candidates(reg_res_sp) %>%   blend_predictions() %>%   fit_members()  reg_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 11 possible candidate members, the ensemble retained 4. #> Penalty: 1e-06. #> Mixture: 1. #>  #> The 4 highest weighted members are: #> # A tibble: 4 × 3 #>   member          type       weight #>   <chr>           <chr>       <dbl> #> 1 reg_res_sp_03_1 linear_reg 0.485  #> 2 reg_res_sp_10_1 linear_reg 0.247  #> 3 reg_res_lr_1_1  linear_reg 0.129  #> 4 reg_res_sp_05_1 linear_reg 0.0666  # predict on the tree frogs testing data predict(reg_st, tree_frogs_reg_test) #> # A tibble: 143 × 1 #>    .pred #>    <dbl> #>  1 119.  #>  2  81.4 #>  3 102.  #>  4  35.5 #>  5 119.  #>  6  50.5 #>  7 122.  #>  8  82.7 #>  9  50.2 #> 10  75.7 #> # ℹ 133 more rows  # include the predictions from the members predict(reg_st, tree_frogs_reg_test, members = TRUE) #> # A tibble: 143 × 5 #>    .pred reg_res_lr_1_1 reg_res_sp_10_1 reg_res_sp_05_1 reg_res_sp_03_1 #>    <dbl>          <dbl>           <dbl>           <dbl>           <dbl> #>  1 119.           138.            125.            121.            114.  #>  2  81.4           82.4            84.8            81.8            77.1 #>  3 102.           116.            111.            112.             93.3 #>  4  35.5           35.8            29.7            32.5            29.6 #>  5 119.           111.            115.            115.            127.  #>  6  50.5           38.8            37.4            36.2            55.3 #>  7 122.           123.            103.            104.            137.  #>  8  82.7           82.3            78.6            82.0            82.8 #>  9  50.2           38.7            37.3            36.2            54.8 #> 10  75.7           78.8            75.3            76.9            71.8 #> # ℹ 133 more rows  # build and fit a classification model stack class_st <-   stacks() %>%   add_candidates(class_res_nn) %>%   add_candidates(class_res_rf) %>%   blend_predictions() %>%   fit_members() #> Warning: Predictions from 1 candidate were identical to those from existing #> candidates and were removed from the data stack.   class_st #> ── A stacked ensemble model ───────────────────────────────────── #>  #> Out of 21 possible candidate members, the ensemble retained 8. #> Penalty: 0.01. #> Mixture: 1. #> Across the 3 classes, there are an average of 4 coefficients per class. #>  #> The 8 highest weighted member classes are: #> # A tibble: 8 × 4 #>   member                       type           weight class #>   <chr>                        <chr>           <dbl> <fct> #> 1 .pred_full_class_res_nn_1_1  mlp         23.3      full  #> 2 .pred_mid_class_res_nn_1_1   mlp          1.89     mid   #> 3 .pred_mid_class_res_rf_1_06  rand_forest  1.71     mid   #> 4 .pred_mid_class_res_rf_1_10  rand_forest  1.17     mid   #> 5 .pred_full_class_res_rf_1_03 rand_forest  0.407    full  #> 6 .pred_full_class_res_rf_1_05 rand_forest  0.222    full  #> 7 .pred_full_class_res_rf_1_01 rand_forest  0.00160  full  #> 8 .pred_full_class_res_rf_1_02 rand_forest  0.000322 full   # predict reflex, first as a class, then as # class probabilities predict(class_st, tree_frogs_class_test) #> # A tibble: 303 × 1 #>    .pred_class #>    <fct>       #>  1 full        #>  2 mid         #>  3 mid         #>  4 mid         #>  5 full        #>  6 full        #>  7 full        #>  8 full        #>  9 full        #> 10 full        #> # ℹ 293 more rows predict(class_st, tree_frogs_class_test, type = \"prob\") #> # A tibble: 303 × 3 #>    .pred_full .pred_low .pred_mid #>         <dbl>     <dbl>     <dbl> #>  1    0.991     0.00777   0.00132 #>  2    0.00877   0.437     0.554   #>  3    0.00449   0.260     0.736   #>  4    0.00912   0.417     0.574   #>  5    0.990     0.00831   0.00141 #>  6    0.991     0.00781   0.00132 #>  7    0.991     0.00773   0.00131 #>  8    0.991     0.00780   0.00132 #>  9    0.991     0.00777   0.00132 #> 10    0.991     0.00777   0.00132 #> # ℹ 293 more rows  # returning the member predictions as well predict(   class_st,    tree_frogs_class_test,    type = \"prob\",    members = TRUE ) #> # A tibble: 303 × 24 #>    .pred_full .pred_low .pred_mid .pred_low_class_res_nn_1_1 #>         <dbl>     <dbl>     <dbl>                      <dbl> #>  1    0.991     0.00777   0.00132                      0.212 #>  2    0.00877   0.437     0.554                        0.481 #>  3    0.00449   0.260     0.736                        0.245 #>  4    0.00912   0.417     0.574                        0.439 #>  5    0.990     0.00831   0.00141                      0.212 #>  6    0.991     0.00781   0.00132                      0.212 #>  7    0.991     0.00773   0.00131                      0.212 #>  8    0.991     0.00780   0.00132                      0.212 #>  9    0.991     0.00777   0.00132                      0.212 #> 10    0.991     0.00777   0.00132                      0.212 #> # ℹ 293 more rows #> # ℹ 20 more variables: .pred_low_class_res_rf_1_06 <dbl>, #> #   .pred_low_class_res_rf_1_10 <dbl>, .pred_low_class_res_rf_1_03 <dbl>, #> #   .pred_low_class_res_rf_1_02 <dbl>, .pred_low_class_res_rf_1_05 <dbl>, #> #   .pred_low_class_res_rf_1_01 <dbl>, .pred_mid_class_res_nn_1_1 <dbl>, #> #   .pred_mid_class_res_rf_1_06 <dbl>, .pred_mid_class_res_rf_1_10 <dbl>, #> #   .pred_mid_class_res_rf_1_03 <dbl>, …"},{"path":"https://stacks.tidymodels.org/dev/reference/prediction_eqn.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert one or more linear predictor to a format used for prediction — prediction_eqn","title":"Convert one or more linear predictor to a format used for prediction — prediction_eqn","text":"Convert one linear predictor format used prediction","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/prediction_eqn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert one or more linear predictor to a format used for prediction — prediction_eqn","text":"","code":"prediction_eqn(x, ...)  # S3 method for class '`_lognet`' prediction_eqn(x, type = \"class\", ...)  # S3 method for class '`_elnet`' prediction_eqn(x, type = \"numeric\", ...)  # S3 method for class '`_multnet`' prediction_eqn(x, type = \"class\", ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/prediction_eqn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert one or more linear predictor to a format used for prediction — prediction_eqn","text":"x object uses glmnet::glmnet() model numeric predictors. ... currently used. type prediction type.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/prediction_eqn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert one or more linear predictor to a format used for prediction — prediction_eqn","text":"return type varies, based model prediction type.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. butcher axe_call, axe_ctrl, axe_data, axe_env, axe_fitted, butcher dplyr %>% generics augment ggplot2 autoplot","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stack_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert one or more linear predictor to a format used for prediction — stack_predict","title":"Convert one or more linear predictor to a format used for prediction — stack_predict","text":"Convert one linear predictor format used prediction","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stack_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert one or more linear predictor to a format used for prediction — stack_predict","text":"","code":"stack_predict(x, ...)  # S3 method for class 'elnet_numeric' stack_predict(x, data, ...)  # S3 method for class 'lognet_class' stack_predict(x, data, ...)  # S3 method for class 'lognet_prob' stack_predict(x, data, ...)  # S3 method for class 'multnet_class' stack_predict(x, data, ...)  # S3 method for class 'multnet_prob' stack_predict(x, data, ...)"},{"path":"https://stacks.tidymodels.org/dev/reference/stack_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert one or more linear predictor to a format used for prediction — stack_predict","text":"x set model expressions generated prediction_eqn(). ... currently used.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stack_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert one or more linear predictor to a format used for prediction — stack_predict","text":"return type varies, based model prediction type.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Stack — stacks","title":"Initialize a Stack — stacks","text":"stacks() function initializes data_stack object. Principally, data_stacks tibbles, first column gives true outcome assessment set, remaining columns give predictions candidate ensemble member. (outcome numeric, ’s one column per candidate member. classification, many columns per candidate member levels outcome variable minus 1.) also bring along extra attributes keep track model definitions, resamples, training data. See ?stacks_description discussion package, generally, basics vignette detailed walk-functionality.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Stack — stacks","text":"","code":"stacks(...)"},{"path":"https://stacks.tidymodels.org/dev/reference/stacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Stack — stacks","text":"... Additional arguments. Currently ignored.","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/stacks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Stack — stacks","text":"data_stack object.","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/stacks_description.html","id":null,"dir":"Reference","previous_headings":"","what":"stacks: Tidy Model Stacking — stacks_description","title":"stacks: Tidy Model Stacking — stacks_description","text":"Model stacking ensemble technique involves training model combine outputs many diverse statistical models, shown improve predictive performance variety settings. 'stacks' implements grammar 'tidymodels'-aligned model stacking.","code":""},{"path":[]},{"path":"https://stacks.tidymodels.org/dev/reference/stacks_description.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stacks: Tidy Model Stacking — stacks_description","text":"Maintainer: Simon Couch simon.couch@posit.co Authors: Max Kuhn max@posit.co contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/tree_frogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree frog embryo hatching data — tree_frogs","title":"Tree frog embryo hatching data — tree_frogs","text":"dataset containing experimental results hatching behavior red-eyed tree frog embryos. Red-eyed tree frog (RETF) embryos can hatch earlier normal 7ish days detect potential predator threat. Researchers wanted determine , , tree frog embryos able detect stimulus environment. , subjected embryos varying developmental stages \"predator stimulus\" jiggling embryos blunt probe. Beforehand, though embryos treated gentamicin, compound knocks lateral line (sensory organ.) Researcher Julie Jung crew found factors inform whether embryo hatches prematurely !","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/tree_frogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree frog embryo hatching data — tree_frogs","text":"","code":"tree_frogs"},{"path":"https://stacks.tidymodels.org/dev/reference/tree_frogs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tree frog embryo hatching data — tree_frogs","text":"data frame 1212 rows 6 variables: clutch RETFs lay eggs gelatinous \"clutches\" 30-40 eggs. Eggs clutch ID siblings ! variable useful mixed effects models. (Unordered factor.) treatment treatment group embryo. Either \"gentamicin\", compound knocks embryos' lateral line, \"control\" negative control group (.e. sensory organs intact). (Character.) reflex measure ear function called vestibulo-ocular reflex, categorized bins. Ear function increases factor levels \"low\", \"mid\", \"full\". (Ordered factor.) age Age embryo, seconds, time embryo jiggled. (Numeric, seconds.) t_o_d time day stimulus (.e. jiggle) applied. \"morning\" 5 .m. noon, \"afternoon\" noon 8 p.m., \"night\" 8 p.m. 5 .m. (Character.) hatched Whether embryo hatched response jiggling! Either \"yes\" \"\". (Character.) latency Time elapsed stimulus (.e. jiggling) hatching response stimulus, seconds. Missing values indicate embryo hatch response stimulus. (Numeric, seconds.)","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/tree_frogs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tree frog embryo hatching data — tree_frogs","text":"Julie Jung et al. (2020) Multimodal mechanosensing enables treefrog embryos escape egg-predators. doi:10.1242/jeb.236141","code":""},{"path":"https://stacks.tidymodels.org/dev/reference/tree_frogs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree frog embryo hatching data — tree_frogs","text":"Note data included stacks package necessarily representative unbiased subset complete dataset, demonstrative purposes.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-development-version","dir":"Changelog","previous_headings":"","what":"stacks (development version)","title":"stacks (development version)","text":"Added missing commas addressed formatting issues throughout vignettes articles. Backticks package names removed missing parentheses functions added (@Joscelinrocha, #218).","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-105","dir":"Changelog","previous_headings":"","what":"stacks 1.0.5","title":"stacks 1.0.5","text":"CRAN release: 2024-07-22 Addressed inflation butchered model stack object size saving reloading (#214). Fixed type-checking bug add_candidates(name).","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-104","dir":"Changelog","previous_headings":"","what":"stacks 1.0.4","title":"stacks 1.0.4","text":"CRAN release: 2024-03-21 Introduced support parallel processing using future framework. stacks package previously supported parallelism foreach, users can use either framework now. future release, stacks begin deprecation cycle parallelism foreach, encourage users begin migrating code now. See Parallel Processing section tune package’s “Optimizations” article learn (#866). Improved error message unsupported model modes (#152).","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-103","dir":"Changelog","previous_headings":"","what":"stacks 1.0.3","title":"stacks 1.0.3","text":"CRAN release: 2023-11-06 Refine package alt text (#202). Update example objects, resolving deprecation warnings recipes (#203). Fix bug type checking blend_predictions(mixture) (#204). Resolve package-level documentation aliasing notice CRAN.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-102","dir":"Changelog","previous_headings":"","what":"stacks 1.0.2","title":"stacks 1.0.2","text":"CRAN release: 2023-04-20 Added augment() method model_stack objects (#173). Converted character variables tree_frogs example data factor updated downstream example objects (#177). Fixed bug resulted errors using model formulas \"mgcv\" engine (#193). Made several optimizations reduce evaluation time memory allocation stacking. Various bug fixes improvements documentation.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-101","dir":"Changelog","previous_headings":"","what":"stacks 1.0.1","title":"stacks 1.0.1","text":"CRAN release: 2022-12-14 Removes unneeded data import attribute tree_frogs example data associated objects (#148). blend_predictions() doesn’t error anymore control argument isn’t control_grid object. long object passed control include elements control_grid() output, parsnip::condense_control() handle input (#149). Tightened integration workflowsets package (#161, #165). Refined logic adding candidates via workflowsets allow partially trained workflow sets. case workflow set contains failed tuning results, stacks inform user excluded data stack add results trained successfully. Extended documentation related packages’ interactions, including new article package website. Revamped errors, warnings, messages. Prompts now provide thorough context arose, include extensive references documentation, correctly pluralized (#150, #167). Various bug fixes improvements documentation.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-100","dir":"Changelog","previous_headings":"","what":"stacks 1.0.0","title":"stacks 1.0.0","text":"CRAN release: 2022-07-06 stacks 1.0.0 first production release package. release includes minor bug fixes, ’s accompanied white paper recently published Journal Open Source software. can read paper ! release: Addresses re-introduction bug arising outcome levels valid column names multinomial classification setting (#133). Fixes bug stacks return incorrect predictions elastic net meta-learner used, type argument predict set \"class\", outcome levels differ alphabetical order. Transitions package internals functions deprecated recipes package.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-024-github-only","dir":"Changelog","previous_headings":"","what":"stacks 0.2.4 (GitHub only)","title":"stacks 0.2.4 (GitHub only)","text":"GitHub-release change package source code. update includes data-raw/paper subdirectory containing source contributed paper Journal Open Source Software.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-023","dir":"Changelog","previous_headings":"","what":"stacks 0.2.3","title":"stacks 0.2.3","text":"CRAN release: 2022-05-12 Addressed deprecation warning add_candidates (#99). Improved clarity warnings/errors related failed hyperparameter tuning resample fitting (#110). Reduced model stack object size fixed bug object size model stack inflated drastically saving file (#116). Also, regenerated example objects change–saved model objects may need regenerated order interface newer versions package. Introduced times argument blend_predictions passed rsample::bootstraps fitting stacking coefficients. Reducing argument default (25) greatly reduces run time blend_predictions (#94). package now load packages necessary model fitting fit_members(), available, fail informatively (#118). Fixed bug meta-learner tuning fail outcome names levels including string \"class\" (#125).","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-022","dir":"Changelog","previous_headings":"","what":"stacks 0.2.2","title":"stacks 0.2.2","text":"CRAN release: 2022-01-06 Fixed errors arising outcome levels valid column names multinomial classification setting. Fixed collect_parameters failing return stacking coefficients two-class classification setting. Regenerated example objects updated {rsample} fingerprinting–saved model objects may need regenerated order build stacks combining models generated update.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-021","dir":"Changelog","previous_headings":"","what":"stacks 0.2.1","title":"stacks 0.2.1","text":"CRAN release: 2021-07-23 Updates importing workflow sets use add_variables() preprocessor. Plot fixes cases coefficients negative. Performance member plots now show effect multiple mixture values. Package diagrams now alt text.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-020","dir":"Changelog","previous_headings":"","what":"stacks 0.2.0","title":"stacks 0.2.0","text":"CRAN release: 2021-04-20","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"stacks 0.2.0","text":"release package changes elements internal structure model stacks. , model stacks stored saved objects need regenerated predicting, plotting, printing, etc.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"stacks 0.2.0","text":"package now supports elastic net models meta-learner via mixture argument blend_predictions. package can now add candidates workflow_map objects new {workflowsets} package. interface add_candidates tune_results objects, add_candidates now generic function. Objects tuned racing methods {finetune} package can now added candidate members.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"stacks 0.2.0","text":"Fixed bug determining member hyperparameters member fitting using non-RMSE/ROC AUC metrics. Fixed bug arising model definition names valid column names. package now message case provided names valid column names use make.names associated candidate members.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"miscellaneous-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous improvements","title":"stacks 0.2.0","text":"Drop {digest} dependency favor {tune}/{rsample} “fingerprinting” check consistency resamples. fit_members() now warn supplied model stack whose members already fitted. Integrate {tune} functionality appropriately coloring errors, warnings, messages. Improved faceting axis scales make autoplot type = \"members\" informative. Various improvements documentation.","code":""},{"path":"https://stacks.tidymodels.org/dev/news/index.html","id":"stacks-010","dir":"Changelog","previous_headings":"","what":"stacks 0.1.0","title":"stacks 0.1.0","text":"CRAN release: 2020-11-23 Initial release!","code":""}]
